{"meta":{"title":"mrl64's Blog","subtitle":"","description":"summer again","author":"liszt_lin","url":"http://example.com","root":"/"},"pages":[{"title":"tags","date":"2021-09-18T01:39:20.000Z","updated":"2021-09-18T01:41:26.232Z","comments":true,"path":"tags/index.html","permalink":"http://example.com/tags/index.html","excerpt":"","text":""},{"title":"categories","date":"2021-09-18T01:39:42.000Z","updated":"2021-09-18T01:41:02.269Z","comments":true,"path":"categories/index.html","permalink":"http://example.com/categories/index.html","excerpt":"","text":""},{"title":"About me","date":"2021-09-18T01:53:01.000Z","updated":"2021-09-18T02:31:17.308Z","comments":true,"path":"about/index.html","permalink":"http://example.com/about/index.html","excerpt":"","text":"我是来自fafu21级网安一班的林昊杨。我于21年暑假接触并认识了ctf并产生了极大的兴趣，希望能在大赛上创下佳绩。加入0xfafu实验室后，我将用博客记录自己的学习生活，希望与大家共同进步。"}],"posts":[{"title":"攻防世界","slug":"攻防世界","date":"2021-10-17T08:19:20.000Z","updated":"2021-10-17T13:36:46.969Z","comments":true,"path":"2021/10/17/攻防世界/","link":"","permalink":"http://example.com/2021/10/17/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C/","excerpt":"前言由于要准备校赛这周就没有刷sqli靶场了，这篇文章主要写攻防世界中web的部分新手题和进阶题，等校赛环境开了就把校赛的wp写了，下周继续刷靶场。","text":"前言由于要准备校赛这周就没有刷sqli靶场了，这篇文章主要写攻防世界中web的部分新手题和进阶题，等校赛环境开了就把校赛的wp写了，下周继续刷靶场。 command_execution这题难度不是很高，但在web新手题里应该算是最难的了，这题要求我们运用到linux常用指令。不过在这之前，先简单说下提示中的waf，waf为web提供保护，可以有效防护sql注入等等手段，可以和防火墙结合起来一起理解。 接着我们再介绍linux的命令执行中的“&amp;”和“|”的作用： 1234c1 &amp;&amp; c2 先执行c1再执行c2c1 &amp; c2 先执行c2后执行c1c1 || c2 c1执行失败后执行c2，反之不执行c2c1 | c2 只执行c2 除了这些，我们还得了解linux基本指令。这题我们使用了ls指令和cat指令： 12ls 查看目录文件cat 读取文件 了解了这些，我们就可以解题了。我们直接查找当前目录下的文件： 就像这样，我们一级一级往上查找，找到根目录后进入home中，我们就可以发现flag就躺在里面，用cat指令打开查看就好了。 simple_js按照道理来说，见面就要输密码的题，一般不太可能字典爆破的出来，再结合题目指向了js，那么我们就去查看网页的js 1234567891011121314151617181920212223242526272829&lt;html&gt;&lt;head&gt; &lt;title&gt;JS&lt;/title&gt; &lt;script type=&quot;text/javascript&quot;&gt; function dechiffre(pass_enc)&#123; var pass = &quot;70,65,85,88,32,80,65,83,83,87,79,82,68,32,72,65,72,65&quot;; var tab = pass_enc.split(&#x27;,&#x27;); var tab2 = pass.split(&#x27;,&#x27;);var i,j,k,l=0,m,n,o,p = &quot;&quot;;i = 0;j = tab.length; k = j + (l) + (n=0); n = tab2.length; for(i = (o=0); i &lt; (k = j = n); i++ )&#123;o = tab[i-l];p += String.fromCharCode((o = tab2[i])); if(i == 5)break;&#125; for(i = (o=0); i &lt; (k = j = n); i++ )&#123; o = tab[i-l]; if(i &gt; 5 &amp;&amp; i &lt; k-1) p += String.fromCharCode((o = tab2[i])); &#125; p += String.fromCharCode(tab2[17]); pass = p;return pass; &#125; String[&quot;fromCharCode&quot;](dechiffre(&quot;\\x35\\x35\\x2c\\x35\\x36\\x2c\\x35\\x34\\x2c\\x37\\x39\\x2c\\x31\\x31\\x35\\x2c\\x36\\x39\\x2c\\x31\\x31\\x34\\x2c\\x31\\x31\\x36\\x2c\\x31\\x30\\x37\\x2c\\x34\\x39\\x2c\\x35\\x30&quot;)); h = window.prompt(&#x27;Enter password&#x27;); alert( dechiffre(h) );&lt;/script&gt;&lt;/head&gt;&lt;/html&gt; 我们发现了一串/x……代码，这串代码的格式为十六进制码，我们把它转换为对应的ascii码值，得出的文本十进制再进行一次转换，得到密码为786OsErtk12，这就是flag内容。 isc-6根据题目我们进入报表中心，发现了熟悉的get点，这里下意识先进行sql注入，但发现全部尝试都失败了，果断排除sql注入。再经历了御剑，抓包的洗礼也没发现有问题，审计源码也没有问题，种种可能性都被排除，那么我们只能把目光锁定在id值上了。 写一个最简单的脚本： 12for m in range(10001): print(m) 输出的数据放入burp suite中进行字典爆破，发现当id值为2333时，返回的长度不同，那么我们把2333get上去，flag就显示出来了。 总结因为这周没做靶场，就拿这周练习的题目写了点wp，实际上做的题不止这些，不过有些因为过于简单，有些因为比较复杂，就都没有写出来，等实验室的比赛平台开了就去写比赛的wp。","categories":[{"name":"web","slug":"web","permalink":"http://example.com/categories/web/"}],"tags":[{"name":"-web前端 -write up -ctf","slug":"web前端-write-up-ctf","permalink":"http://example.com/tags/web%E5%89%8D%E7%AB%AF-write-up-ctf/"}]},{"title":"bugku-web练习","slug":"bugku练习","date":"2021-10-14T06:55:42.000Z","updated":"2021-10-17T08:20:59.229Z","comments":true,"path":"2021/10/14/bugku练习/","link":"","permalink":"http://example.com/2021/10/14/bugku%E7%BB%83%E4%B9%A0/","excerpt":"前言由于校赛要开始了，就做了些简单的题目练手，有bugku也有攻防世界的，这篇博客记录几题bugku的题。 滑稽看图实在费眼睛，直接f12查看源码找到flag走人就行了","text":"前言由于校赛要开始了，就做了些简单的题目练手，有bugku也有攻防世界的，这篇博客记录几题bugku的题。 滑稽看图实在费眼睛，直接f12查看源码找到flag走人就行了 计算器可以看到进入页面后是一道非常简单的计算题，答案一眼就能看出是70，但是我们打算输入时却发现，我们只能输入一个数字。使用f12查看源码，发现了这么一行：&lt;input type=&quot;text&quot; class=&quot;input&quot; maxlength=&quot;1&quot;&gt; 输入的最大长度为1，那么我们把1改成2，再输入进行验证就可以得到flag了。 GET &amp;&amp; POST非常直白的题目，这两题的页面都提供了php代码，分别以get和post上传一个waht=flag，flag就会回显出来了 矛盾我们分析这题的代码，可以知道我们需要以get的方式上传一个数值为1的非数字，这样看来确实是矛盾的。但是我们可以发现这里的判断符为==而并非===，因此不比较两个变量的类型，这样我们就可以输入字符串而并非数字来进行判断。这里我们get传入一个num=1a就可以了 头等舱web中与头相关我们首先想到的就是响应头和请求头了，因此这题直接查看网页的响应头，发现flag就在其中。 网站被黑这题一进去我们查看源码，抓包等都一无所获，因此我们要想到对网页进行路径扫描，这里我们用了御剑进行扫描，发现了shell.php，也就是被人上传木马了。 我们进入shell.php，发现需要密码，如果你能灵机一动猜出密码是hack的话，那恭喜你，得到了flag，否则的话还是老老实实进行字典爆破吧。 你必须让他停下进入页面后发现页面一直在刷新，但是在查看源码时可以发现有一次刷新是可以显示flag的，那么我们就耐心抓包，抓到flag就算成功。 本地管理员进入页面发现要输入账号密码，尝试输入后发现ip禁止访问，我们通过抓包添加一个xxf的请求头，将其设置为127.0.0.1，接着提示了无效凭证，那么估计就是密码的问题了，爆破密码直接无脑字典，爆出来密码为test123，最后登录获取flag。 总结以上八题都是比较简单的题目，主要接触了ctf题目的类型与解题思路，为周六的校赛做准备。","categories":[{"name":"web","slug":"web","permalink":"http://example.com/categories/web/"}],"tags":[{"name":"-web前端 -write up -ctf","slug":"web前端-write-up-ctf","permalink":"http://example.com/tags/web%E5%89%8D%E7%AB%AF-write-up-ctf/"}]},{"title":"sqli-labs练习-less18-22","slug":"sqli-labs练习-less18-22","date":"2021-10-07T12:05:42.000Z","updated":"2021-10-08T15:44:02.597Z","comments":true,"path":"2021/10/07/sqli-labs练习-less18-22/","link":"","permalink":"http://example.com/2021/10/07/sqli-labs%E7%BB%83%E4%B9%A0-less18-22/","excerpt":"前言接下来的几关我们需要用到抓包工具来帮助我们进行解题，我们用到了burp suite工具（需要JAVA环境），并且通过下面几个靶场具体分析学习这个工具的使用。 less-18首先进入网页，我们发现显示了当前的ip地址，但这似乎对我们并没有什么用。依然尝试随便输入，发现提示登录失败，简单注入也没有报错回显。我们去查看下源码，发现账户密码都被check_input函数保护起来了，因此我们显然不能在这个页面中进行注入了。","text":"前言接下来的几关我们需要用到抓包工具来帮助我们进行解题，我们用到了burp suite工具（需要JAVA环境），并且通过下面几个靶场具体分析学习这个工具的使用。 less-18首先进入网页，我们发现显示了当前的ip地址，但这似乎对我们并没有什么用。依然尝试随便输入，发现提示登录失败，简单注入也没有报错回显。我们去查看下源码，发现账户密码都被check_input函数保护起来了，因此我们显然不能在这个页面中进行注入了。 既然页面不能注入，我们就进行抓包操作，先随意输入一组账号密码，得到抓包结果： 想要进行注入操作，我们就要先了解这些请求头的含义，这里举几个常用的请求头为例： HOST：指定被请求资源的Internet主机与端口号 User-Agent：允许客户端将操作系统、浏览器等信息报告给服务器 Referer：当前访问的URL的上一个URL X-Forwarded-For：请求端IP Cookie：一段文本，一般用来储存用户资料，相当重要 不过在这里我们似乎找不到注入点，那我们试着输入一段正确的账户密码。我们这里有两种操作： 我们在Proxy下直接更改账户密码并将其forward，我们可以回到浏览器查看结果 我们使用ctrl+r将其发送到Repeater中，在并request中修改账户密码，将其go到response中，并在response中的render下查看结果 这里我们选方法2：ps：这里密码为123456是因为在做24关的时候改密了，正常密码应该也为admin 我们可以发现这时返回了User-Agent，我们可以通过源码分析这段的注入原理：$insert=&quot;INSERT INTO &#39;security&#39;.&#39;uagents&#39; (&#39;uagent&#39;, &#39;ip_address&#39;, &#39;username&#39;) VALUES (&#39;$uagent&#39;, &#39;$IP&#39;, $uname)&quot;; 这段代码便是我们注入的关键，这一次不是select语句，而是insert语句。这段代码会在登陆成功后回显uagent，并将uagent、IP、uname插入到security数据库的uagents表的uagent、ip_address、username三个字段中。并且结合其他代码我们可以知道，只有输入正确的账号密码才能进入到这个insert语句，因此我们可以判断注入点就在User-Agent中。 找到注入点后，我们就可以通过之前使用过的很多语句进行爆库了：还可以使用时间盲注或者其他类型的报错等等，这里不再赘述。 less-19十九关与十八关的差别不大，输入admin发现这次回显的是Referer内容，那我们就猜测注入点在referer中，通过查询源码发现也确实如此，那么我们就可以进行爆库了。 less-20通过标题提示我们知道这道题的关键在于cookie上。我们先去查看一波源码，发现这次的select语句对$cookie进行了查询，那么我们大可判断这次的注入点在cookie中。 我们来先分析burp suite是如何进行这关的抓包的：首先先验证账户密码是否正确，如果正确的话就进行set cookie 接下来forward之后我们就可以发现cookie已经被记录了下来：同时我们得知cookie只记录下了uname，这时我们修改cookie为1，用浏览器开发者工具读取cookie，发现admin依然保存在value值中。我们就可以判断当页面request时，若cookie中存在uname则直接读取，因此这题注入点就在cookie中。 找到了注入点，我们就可以开始平平无奇的爆库了，直接简单的查询语句加注释就行。 less21-22到这里我们就进入了靶场的第二页了，恭喜自己能更进一步了。我们进入21关，基于base64的cookie注入。这里关于base64的知识可以参考下面这个文章：base64介绍 我们首先用burp suite进行抓包，发现这次的cookie中出现了这段代码：Cookie: uname=YWRtaW4%3D这里的%3D就是“=”，这是一段很经典的base64，不过我们自然不用一个个自己解码，burp suite中的Decoder模块中的decode as就可以进行base64的编码与解码，那么我们就先进行解码，结果为admin。 不过这题同第20关的区别也就在这里了，其他的操作与20关并无相异，注意注入是否有括号，接着我们只要将原来输入的代码先进性base64编码再注入就行了。 而第22关是基于双引号的报错，只要使用双引号就行了 总结进入了靶场的Page2，难度比起Page1显著增加，接下来将会对特殊符号进行过滤，这又是新的挑战了。","categories":[{"name":"web","slug":"web","permalink":"http://example.com/categories/web/"}],"tags":[{"name":"-web前端 -mysql","slug":"web前端-mysql","permalink":"http://example.com/tags/web%E5%89%8D%E7%AB%AF-mysql/"}]},{"title":"sqli-labs练习-less11-17","slug":"sqli-labs练习-less11-17","date":"2021-10-05T12:47:48.000Z","updated":"2021-10-06T06:12:25.134Z","comments":true,"path":"2021/10/05/sqli-labs练习-less11-17/","link":"","permalink":"http://example.com/2021/10/05/sqli-labs%E7%BB%83%E4%B9%A0-less11-17/","excerpt":"前言进入第10关后，我们就要开始接触POST注入了,11-16关在注入操作上并未与前面有较大差别，我们可以根据题目要求进行注入，从第17关开始网页中开始加入过滤，这要求我们学习更多的注入姿势来解决问题。 注意下面所列出的代码是基于php5版本的，若搭建的靶场为php7版本的，代码可能会有一定出入。 less11-16不说废话，直接上代码，以less-12的代码为例，下面也以less-12为例进行分析，其他的关卡都可以凭借题目进行注入，因此不再详解：","text":"前言进入第10关后，我们就要开始接触POST注入了,11-16关在注入操作上并未与前面有较大差别，我们可以根据题目要求进行注入，从第17关开始网页中开始加入过滤，这要求我们学习更多的注入姿势来解决问题。 注意下面所列出的代码是基于php5版本的，若搭建的靶场为php7版本的，代码可能会有一定出入。 less11-16不说废话，直接上代码，以less-12的代码为例，下面也以less-12为例进行分析，其他的关卡都可以凭借题目进行注入，因此不再详解： 12345678910111213if(isset($_POST[&#x27;uname&#x27;]) &amp;&amp; isset($_POST[&#x27;passwd&#x27;]))&#123; $uname=$_POST[&#x27;uname&#x27;]; $passwd=$_POST[&#x27;passwd&#x27;];...... // connectivity $uname=&#x27;&quot;&#x27;.$uname.&#x27;&quot;&#x27;; $passwd=&#x27;&quot;&#x27;.$passwd.&#x27;&quot;&#x27;; @$sql=&quot;SELECT username, password FROM users WHERE username=($uname) and password=($passwd) LIMIT 0,1&quot;; $result=mysql_query($sql); $row = mysql_fetch_array($result); 我们可以发现从本质上来说，POST与GET的差别不是很大，作为HTTP请求的两种基本方法，他们最大的区别就在于GET是把参数写进了URL中，从指定的资源请求数据，而POST是向指定的资源提交要被处理的数据，是要我们上传数据的。两者具体的区别可以通过下面这篇文章学习：HTTP：GET对比POST 进入靶场我们可以发现多出了一个输入框，现在我们可以输入一个账号密码了，而不是在域名中输入一个id。通过上面的代码，比如当我们输入账号为1，密码为1后，就相当于POST了一个$uname=1&amp;$passwd=1，并且传入sql中进行查找，不过显然数据库中没有这一组账号密码，因此提示我们登录失败了。 注入的关键还是那行查询代码。我们发现查询代码中首先对我们POST的两个变量添加了双引号并且打上了括号，接着可以发现$uname在$passwd的前面，这就意味着我们从输入账户的那一栏添加注释可以屏蔽掉密码栏。知道这些后，我们就可以开始进行注入了注意：在使用注释“–+”时用空格代替“+”号，不然会报错，或者直接使用其他注释方法。 接下来就是使用order by爆字段，可以发现这次的字段数为2：这里也推荐使用火狐中的插件hackbar，可以去网上自行搜寻旧版本免费试用，新版本需要收费。 到此为止，剩下的事情就是熟悉的爆库了。熟练运用之前靶场中学会的查询、盲注等多种方法。特别提示，如果在做第十四关时发现标题和第十三关一样，那请你千万不要相信标题。 less-17第十七关它又不一样了。首先，当你在进行初始测试时，它会对你进行无情嘲讽，让你上头，但接着你发现无论怎样在账户中注入，都只有对你的嘲讽出现。你不得不冷静下来，翻开源码： 123456789101112131415161718192021222324function check_input($value) &#123; if(!empty($value)) &#123; // truncation (see comments) $value = substr($value,0,15); &#125; // Stripslashes if magic quotes enabled if (get_magic_quotes_gpc()) &#123; $value = stripslashes($value); &#125; if (!ctype_digit($value)) &#123; $value = &quot;&#x27;&quot; . mysql_real_escape_string($value) . &quot;&#x27;&quot;; &#125; else &#123; $value = intval($value); &#125; return $value; &#125; 我们发现了这段check_input函数，并且还发现了$uname这个变量进行了一次check_input函数。接下来我们详细分析一下这个函数： 第一个判断，如果输入的值不为空，截取最多15个字符，这意味着我们想进行注入的话只能保证字符在15个以内，现在对于我们来说这几乎是不可能的。 接着判断当前设置中get_magic_quotes_gpc是否开启了，如果开启了的话将会为通过get、post与cookie传来的数据中的引号前加入反斜杠，相当于自动为数据进行了一次addslashes()，因此如果开启，则通过stripslashes()函数删去其中的反斜杠。 最后判断输入的值是否为十进制纯数字，如果不是则将值中的特殊字符转义，否则取整。以下这些字符会被mysql_real_escape_string()转义：\\x00（空值），\\n（换行），\\r（回车） ，反斜杠，单引号，双引号，\\x1a（十六进制） 这段函数对用户名实行了保护，因此我们不能从用户名中入手了，但是翻看源码，它居然没有保护密码。因此我们只要获得一个合法的用户名，就可以从密码栏入手了：$uname=admin&amp;$passwd=&#39; order by 3#如此一来，我们就可以开始爆库了。 总结POST注入方法与GET注入大同小异，但是对输入的数据进行一定的过滤却给我们造成了一定的麻烦，而且这样的过滤在以后会愈发严苛。因此接下来我们要开始学习抓包工具的使用，对网页进行新的注入。","categories":[{"name":"web","slug":"web","permalink":"http://example.com/categories/web/"}],"tags":[{"name":"-web前端 -mysql","slug":"web前端-mysql","permalink":"http://example.com/tags/web%E5%89%8D%E7%AB%AF-mysql/"}]},{"title":"sqli-labs练习-less8-10","slug":"sqli-labs练习-less8-10","date":"2021-10-02T04:56:56.000Z","updated":"2021-10-02T07:33:09.659Z","comments":true,"path":"2021/10/02/sqli-labs练习-less8-10/","link":"","permalink":"http://example.com/2021/10/02/sqli-labs%E7%BB%83%E4%B9%A0-less8-10/","excerpt":"前言接下来的三关就是盲注题了，盲注是SQL注入中最重要的技能，当页面中的数据无法回显到前端时，就需要借助盲注手段来判断。同时，盲注往往也带有着工具或脚本的使用，我们也可以借此机会进行学习。 关于盲注盲注的使用要基于用户自己可以对输入进行控制，且要能接入进执行代码中。盲注分为两种：布尔盲注和时间盲注。","text":"前言接下来的三关就是盲注题了，盲注是SQL注入中最重要的技能，当页面中的数据无法回显到前端时，就需要借助盲注手段来判断。同时，盲注往往也带有着工具或脚本的使用，我们也可以借此机会进行学习。 关于盲注盲注的使用要基于用户自己可以对输入进行控制，且要能接入进执行代码中。盲注分为两种：布尔盲注和时间盲注。 布尔盲注：通过返回true与false的不同，导致页面的回显不同进行判断，之前使用and 1=1与and 1=2判断注入点也是用此原理 时间盲注：通过返回true与false的不同，导致页面的加载时间不同进行判断，一般使用if语句 less-8标题就是基于单引号的布尔盲注，那我们先将id和单引号一起输入进去，然后发现这是一点报错都没有啊。我们可以查看源码，发现报错这一行（下列源码的第三行）被注释了： 123456echo &#x27;&lt;font size=&quot;5&quot; color=&quot;#FFFF00&quot;&gt;&#x27;;//echo &#x27;You are in...........&#x27;;//print_r(mysql_error());//echo &quot;You have an error in your SQL syntax&quot;;echo &quot;&lt;/br&gt;&lt;/font&gt;&quot;; echo &#x27;&lt;font color= &quot;#0000ff&quot; font size= 3&gt;&#x27;; 那么这种情况下我们就需要使用盲注了。先用and 1=1和and 1=2判断，发现前者会回显一个“You are in….”，而后者依然是什么都没有，那么我们就知道了，当返回true时，页面会回显一句话，反之则什么都不回显。 既然掌握了原理，那么我们就可以开始准备注入了。下面我们来介绍我们需要用到的函数： length()：返回字符串的长度 substr(str,start,len):截取“str”字符串从第“start”位开始的“len”长度的字符 ascii()：返回字符的ascii码值，关于ascii码值可以参考下图： 正式开始注入，我们使用and或者or来对代码进行连接，一定要注意，and的true返回条件是左右两边都为真，or的true返回条件只需要有一边为真就行了，因此在这里前面id如果存在于数据库之中要用and，不存在则用or。由于刷POST题时犯了个蠢，在这里先提一下。 由于我们已经知道数据库的名称为security了，所以我们就不从猜数据库开始了，可以用length(database())先确定数据库名称的长度，再一位一位进行猜测。这里我们直接开始猜表。首先是表的个数：n=(select count(table_name) from information_schema.tables where table_schema=&#39;数据库名&#39;) n可以替换为任何数，后面的查询语句也可以替换来查询表的列数等等。当返回true时，也就是我们看到“You are in….”时，代表着我们猜对了，我们就可以进行下一步猜表名了：ascii(substr((select table_name from information_schema.tables where table_schema=&#39;security&#39; limit 0,1),m,1))=n 这里我们用limit限制了查询的表为数据库中的第一个表，这个函数验证的是第一个表的第m个字段的ascii码是否为n，这个等号也可以替换为大于号或者小于号来帮助我们缩小范围。通过这种方法我们可以逐步推出第一个表的名字为emali。但是一个个试的效率是十分低的，我们可以用二分法来提高效率，或者学习如何使用脚本或者工具来帮助我们提高效率，这里就不展开了。 得到表的名称后，我们可以更改以上代码的查询语句一步步查询出我们想要的数据了。 less-9这关根据标题要使用时间盲注，但我先用了布尔盲注进行测试，结果发现无论返回true还是false，页面都会回显“You are in….”，查看源码就可以发现确实如此，因此这个靶场我们就要使用时间盲注了。 使用时间盲注时我们会用到if语句和sleep()函数进行配合： if(expr1,expr2,expr3)：当语句1返回的结果为true时，执行语句2，反之则执行语句3 sleep(x)：延迟执行脚本x秒 时间盲注有个很显著的优点，不需要通过页面回显来判断，在页面没有回显内容的时候，时间盲注就可以很好的帮助我们进行判断。例如我们同样来判断数据库中表的个数：if(n=(select count(table_name) from information_schema.tables where table_schema=&#39;数据库名&#39;),sleep(3),1) 显而易见，当数据库中表的个数为n时，脚本将暂停3秒再执行，否则什么都不会发生，这样我们就可以通过观察网页的加载时间来判断返回值是true还是false。 这样一来，我们只要将if()中的语句1进行更改，就可以像less-8一样逐步获得数据库中的信息了。 less-10把单引号换成双引号，然后把less-9的过程走一遍，然后你就成功又做出了一关，这真是令人感到高兴呢（bushi）。 总结刷到这里，前十关的GET型靶场就刷完了，接下来就是POST型靶场了，但其实两者的区别不大，只要我们掌握好前十关用到的方法，熟练运用，一直到less-16相信都能很快解开。","categories":[{"name":"web","slug":"web","permalink":"http://example.com/categories/web/"}],"tags":[{"name":"-web前端 -mysql","slug":"web前端-mysql","permalink":"http://example.com/tags/web%E5%89%8D%E7%AB%AF-mysql/"}]},{"title":"sqli-labs练习-less7","slug":"sqli-labs练习-less7","date":"2021-10-01T02:53:40.000Z","updated":"2021-10-02T07:32:56.828Z","comments":true,"path":"2021/10/01/sqli-labs练习-less7/","link":"","permalink":"http://example.com/2021/10/01/sqli-labs%E7%BB%83%E4%B9%A0-less7/","excerpt":"前言由于less7相比于其他的关卡比较特殊，因此单独对这个靶场进行详细的分析。less7靶场我们要学习上传一句话木马获得网页的控制权，并且使用工具（例如菜刀）来进行连接。 less-7输入id后，我们发现这次的返回文字多了一段“Use outfile……”，那么结合提示我们就可以判断出这题需要我们通过写入文件并注入一句话木马来对网页实现控制。","text":"前言由于less7相比于其他的关卡比较特殊，因此单独对这个靶场进行详细的分析。less7靶场我们要学习上传一句话木马获得网页的控制权，并且使用工具（例如菜刀）来进行连接。 less-7输入id后，我们发现这次的返回文字多了一段“Use outfile……”，那么结合提示我们就可以判断出这题需要我们通过写入文件并注入一句话木马来对网页实现控制。 那么首先，我们也要先找到注入点。试试单引号，双引号，单引号加括号等多种形式，我们找到了答案为单引号加上两个括号。接下来，我们开始进行注入。 首先要注意的是，我们在进行outfile文件注入的时候必须要有root权限，而且要知道网站绝对路径的地址。不过由于这个靶场是我们自己搭的，因此很容易可以满足这些条件，当然，我们也可在之前的靶场中使用@@datadir指令来获得数据库的路径： 好有了绝对路径，直接动手，我们使用这段代码：select ... into outfile &quot;绝对路径&quot;这段代码可以将select的内容注入进绝对路径下的一个文件，我们这里注入到一个7.php的文件下，如果没有这个文件会自动创建一个同名文件，但是这条代码不会覆盖原文件，因此写入时最好一次成功，如果要再次写入则需要更换文件名。 要特别注意的是，在复制绝对路径后，我们需要在“\\”后再加上一个“\\”或者将“\\”改成“/”，例如： 12D:\\\\phpstudy_pro\\\\WWW\\\\sqli-labs-master\\\\Less-7\\\\7.phpD:/phpstudy_pro/WWW/sqli-labs-master/Less-7/7.php 有代码基础的一定知道，“\\”代表着转义字符，而\\\\才是意味着字符“\\”。而“\\”的路径是windows系统所独有的表达方式，但“/”表达的路径是可以被windows、linux和mac等操作系统共同识别的，因此更推荐第二种表达路径的方式。 接下来我们要注入一句话木马了，php格式的一句话木马为：&lt;?php @eval($_POST[&#39;chopper&#39;]);?&gt;其中的chopper是值，前面的POST（或者REQUEST等）用来获取这个值，这个值之后要用到，可自定义。这样我们就可以使用工具（菜刀，webshell等）进行访问了。 注入之后我们发现页面虽然报错，但是浏览本地文件，发现了这个7.php已经成功注入进文件夹中了，并且代码也已经被成功写入： 注入成功，我们就可以掏出我们的工具了，这里使用菜刀。如上，连接成功！ 总结文件写入是解题时一项重要的技能，在解题时学习工具的使用，将会更好的帮助我们获取数据，解开谜题。","categories":[{"name":"web","slug":"web","permalink":"http://example.com/categories/web/"}],"tags":[{"name":"-web前端 -mysql","slug":"web前端-mysql","permalink":"http://example.com/tags/web%E5%89%8D%E7%AB%AF-mysql/"}]},{"title":"sqli-labs练习-less5-6","slug":"sqli-labs练习-less5-6","date":"2021-09-28T12:18:07.000Z","updated":"2021-09-28T13:43:40.715Z","comments":true,"path":"2021/09/28/sqli-labs练习-less5-6/","link":"","permalink":"http://example.com/2021/09/28/sqli-labs%E7%BB%83%E4%B9%A0-less5-6/","excerpt":"前言进入第五个靶场以后，我们需要运用到的知识就更为广泛了，仅凭借less1-4的方式是无法解决问题的。因此我们要后面的靶场中要多去搜索，尽力去理解每一关中的注入类型，学会更多的注入姿势。 less-5方法1进入第五个靶场，在我们输入id之后，我们会发现一切都变了，屏幕上只剩下一句“You are in……..”和在屏幕前一脸懵的我们。遇到这种情况先不要惊慌，还记得提示内容依然指向了单引号，既然如此，我们依然在域名最后先加上一个单引号。","text":"前言进入第五个靶场以后，我们需要运用到的知识就更为广泛了，仅凭借less1-4的方式是无法解决问题的。因此我们要后面的靶场中要多去搜索，尽力去理解每一关中的注入类型，学会更多的注入姿势。 less-5方法1进入第五个靶场，在我们输入id之后，我们会发现一切都变了，屏幕上只剩下一句“You are in……..”和在屏幕前一脸懵的我们。遇到这种情况先不要惊慌，还记得提示内容依然指向了单引号，既然如此，我们依然在域名最后先加上一个单引号。 回车来了，报错就有了。这是一段与less-1完全一致的报错，加上注释后回显恢复正常，再用and 1=1和and 1=2检验后可以确定这里存在注入点。既然存在注入点，那就有解开它的方法。但是显然，不管我们怎样更改id的值，得到的永远只有那句“You are in……..”。 显然前四关使用union联合查询的方法在这关不起作用。那么我们就得换个思路了，提示指向了双查询注入，那么我们就将目光放到双查询注入上。双查询注入原理浅析我们可以先通过上面的网址简单了解双查询注入的运行原理，了解之后我们将这段floor()报错的语句摘取出来：and (select 1 from (select count(*),concat((查询语句),floor (rand(0)*2))x from information_schema.tables group by x)a) 这段代码就是我们解开问题的关键所在，将这段代码中的查询语句改为database()并补入域名之中，可以发现报错已经回显了当前所在的数据库名： 这时我们也许会有疑问了，为什么数据库的名字变成了“security1”呢？其实这不是因为数据库的名字变了，而是这个“1”为floor()报错语句中输出的一部分，无论输出什么都会出现这个“1”，因此数据库的实际名称仍然为“security”。 既然问题解决了，那么就进入了愉快的爆库流程了，但是当我们在获取表中的数据时，出现了这么一行： Subquery returns more than 1 row 我们页面的信息超过了一行，在我们使用了group_concat函数的情况下显示这个报错说明了这里的字符长度超过了64位。这种情况下，我们应该使用limit数来进行一个个输出：select concat(列名) from 数据库名.数据表名 limit 0,1 方法2用完floor()报错后，我就在想有没有其他的报错方法也能达到相同的效果呢，结果还真有：updatexml(1,concat(0x7e, 查询语句,0x7e),1)或者extractvalue(1,concat(0x7e,查询语句,0x7e))这两句代码的具体语法可以参考下面这个链接的教程：方法2中的报错注入 这里简单介绍下这两句代码的报错原理，这两句代码的第二个参数需要设置Xpath格式的字符串，而“0x7e”，即“~”开头不符合其语法，concat()函数为字符串连接函数不符合规则，导致代码中括号内的结果以错误的形式报出，达到目的。 而这两句代码的字符串限制为32位，因此在进行爆表流程时，我们也应该使用limit函数将数据一行一行显示出来，达到同样效果。 less-6观察less-6的标题，发现好像就是把单引号变成了双引号，那是不是我们也只要将代码中id后面的单引号变成双引号呢？ 要是真的这么想，那你可真是太聪明了，这关真的就只要把单引号改成双引号就可以了，然后就根据第五关的方法就可以顺利解开了。 总结通过练习靶场中的less5-6，我们了解并学习了sql注入中的双重查询注入与报错回显，这两关靶场的新内容明显多于前四个靶场，越往后深入，我们也会学习到更多的新内容。因此我们必须记录下自己的学习历程，不断进步，不断提高。","categories":[{"name":"web","slug":"web","permalink":"http://example.com/categories/web/"}],"tags":[{"name":"-web前端 -mysql","slug":"web前端-mysql","permalink":"http://example.com/tags/web%E5%89%8D%E7%AB%AF-mysql/"}]},{"title":"sqli-labs练习-less2-4","slug":"sqli-labs练习-less2-4","date":"2021-09-27T12:44:02.000Z","updated":"2021-09-27T14:00:24.221Z","comments":true,"path":"2021/09/27/sqli-labs练习-less2-4/","link":"","permalink":"http://example.com/2021/09/27/sqli-labs%E7%BB%83%E4%B9%A0-less2-4/","excerpt":"前言在进行了less-1的靶场练习后，我们就有了完成前4个靶场的能力，只要仔细看好报错语句以及提示，相信less2-4完全不会难住我们。 less-2又看到了那段熟悉的提示，依旧十分愉快地输入上id，也十分愉快地看到了熟悉的账户密码。但是我们再次注入单引号时，发现了这次的报错提示与less-1不一样了。less-1输入单引号后的报错： You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near ‘’1’’ LIMIT 0,1’ at line 1 less-2输入单引号后的报错： You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near ‘’ LIMIT 0,1’ at line 1","text":"前言在进行了less-1的靶场练习后，我们就有了完成前4个靶场的能力，只要仔细看好报错语句以及提示，相信less2-4完全不会难住我们。 less-2又看到了那段熟悉的提示，依旧十分愉快地输入上id，也十分愉快地看到了熟悉的账户密码。但是我们再次注入单引号时，发现了这次的报错提示与less-1不一样了。less-1输入单引号后的报错： You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near ‘’1’’ LIMIT 0,1’ at line 1 less-2输入单引号后的报错： You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near ‘’ LIMIT 0,1’ at line 1 我们发现引号之中的’1’不见了，再结合第二关的提示（GET-Error based-Intiger based），我们就可以知道在这一关中的sql查询代码中原本id两边的单引号不见了，我们去翻阅下源代码，果不其然： 123$sql=&quot;SELECT * FROM users WHERE id=$id LIMIT 0,1&quot;;$result=mysql_query($sql);$row = mysql_fetch_array($result); 既然源代码中id没有了单引号，那么我们就可以直接对其进行注入，如果不放心，我们可以用and 1=1和and 1=2来进行验证。验证成功后，我们就可以进行愉快的爆库流程了: less-3同样的配方，同样的味道，那我们也先使用同样的方式，加上熟悉的单引号后，我们发现这次的报错多了一个新同学： You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near ‘’1’’) LIMIT 0,1’ at line 1 是括号，他加了括号。已经做了两个靶场的我们，相信已经对那段sql查询代码十分熟悉了，注入的关键点就在那段&amp;id=’id’中。我们将1’带入，发现变量变成了&amp;id=’1’’,这时根据报错我们可以发现引号的右边多出了一个），我们就可以推断本题的查询代码应该为：$sql=&quot;SELECT * FROM users WHERE id=(&#39;$id&#39;) LIMIT 0,1&quot;; 查看了源码后，果然如此，那么分析出了代码，那么这题的注入就十分简单了，我们只需要在单引号后补充一个“）”，并将后面的内容注释掉，我们就可以进行熟练的爆库了。 less-4这次我们发现提示他变了，他从我们的老朋友single quotes变成了double quotes，其实也就是把单引号注入变成了双引号注入，该怎么样还是换汤不换药。既然提示都说了如此，我们这次将单引号换成双引号后进行注入，发现报错如下： You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near ‘“1””) LIMIT 0,1’ at line 1 换汤不换药，本关中的报错同上一关只是有几个单引号变成了双引号，那就说明只要我们加上一个右括号并注释后面的内容后就可以进行注入了。在爆库之前，我们把源码拿出来分析一下： 1234$id = &#x27;&quot;&#x27; . $id . &#x27;&quot;&#x27;;$sql=&quot;SELECT * FROM users WHERE id=($id) LIMIT 0,1&quot;;$result=mysql_query($sql);$row = mysql_fetch_array($result); 第一行代码的意思就是&amp;id=”id”,我们可以把这关的查询语句看成$sql=&quot;SELECT * FROM users WHERE id=(&quot;id&quot;) LIMIT 0,1;,这样我们就可以很好的理解本关的注入原理了。分析完毕，爆库。 总结经历了四个靶场的洗礼，我们已经基本掌握了SQL注入的最基本原理与方法。在之后靶场的练习中，我们将学习更多更复杂的注入方式，我们要做好记录，认真研究，及时复习，继续学习相关知识，拓宽自己。","categories":[{"name":"web","slug":"web","permalink":"http://example.com/categories/web/"}],"tags":[{"name":"-web前端 -mysql","slug":"web前端-mysql","permalink":"http://example.com/tags/web%E5%89%8D%E7%AB%AF-mysql/"}]},{"title":"sqli-labs练习 less1","slug":"sqli-labs练习-less1","date":"2021-09-26T08:25:32.000Z","updated":"2021-09-27T14:00:36.082Z","comments":true,"path":"2021/09/26/sqli-labs练习-less1/","link":"","permalink":"http://example.com/2021/09/26/sqli-labs%E7%BB%83%E4%B9%A0-less1/","excerpt":"前言在学习完php的基本语言和mysql增删查改语句后，我们已经初步具备了靶场练习的能力，在群文件的《web安全方向入门学习计划表》中就提供了靶场的下载途径。让我们先从sqli-labs开始练习SQL注入。 关于SQL注入在练习靶场之前，我们首先要了解什么是SQL注入。SQL注入常常发生在通过网页获取用户输入的数据并将其插入MySQL数据库中，黑客通过把SQL命令插入到域名、web表单等手段达到欺骗服务器的目的，因此网站都会对用户输入的数据进行过滤来进行保护。","text":"前言在学习完php的基本语言和mysql增删查改语句后，我们已经初步具备了靶场练习的能力，在群文件的《web安全方向入门学习计划表》中就提供了靶场的下载途径。让我们先从sqli-labs开始练习SQL注入。 关于SQL注入在练习靶场之前，我们首先要了解什么是SQL注入。SQL注入常常发生在通过网页获取用户输入的数据并将其插入MySQL数据库中，黑客通过把SQL命令插入到域名、web表单等手段达到欺骗服务器的目的，因此网站都会对用户输入的数据进行过滤来进行保护。 而在练习靶场中，我们就需要通过SQL注入的方式获得数据库中的数据，接下来我们来具体分析sqli-labs靶场中的第一关来深刻认识SQL注入。 less-1首先进入less-1的界面，我们可以看到一行字： Please input the ID as parameter with numeric value 那么我们就按照这句话的意思：请输入ID作为带数值的参数，在域名中输入一个ID：http://127.0.0.1/Less-1/?id=1接着按下回车后我们可以看到页面中出现了一对账号密码： 而根据提示（GET-Error based-Single quotes-String)可以知道，这道关卡是要利用源码中基于单引号的错误来进行解决，那么我们就尝试在域名结尾加上一个&#39;http://127.0.0.1/Less-1/?id=1&#39;回车后我们就可以发现网站报错了，如果没有报错的话，可以参考下面的链接关闭php的引号保护：关于Sqli-labs单引号不报错的问题而如果报错的话，我们会看到以下这段文字： You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near ‘’1’’ LIMIT 0,1’ at line 1 那么为什么会出现这一段文字呢，我们借助文件的源码进行分析: 123456789101112131415161718192021222324252627282930if(isset($_GET[&#x27;id&#x27;]))&#123;$id=$_GET[&#x27;id&#x27;];//logging the connection parameters to a file for analysis.$fp=fopen(&#x27;result.txt&#x27;,&#x27;a&#x27;);fwrite($fp,&#x27;ID:&#x27;.$id.&quot;\\n&quot;);fclose($fp);// connectivity $sql=&quot;SELECT * FROM users WHERE id=&#x27;$id&#x27; LIMIT 0,1&quot;;$result=mysql_query($sql);$row = mysql_fetch_array($result);if($row) &#123; echo &quot;&lt;font size=&#x27;5&#x27; color= &#x27;#99FF00&#x27;&gt;&quot;; echo &#x27;Your Login name:&#x27;. $row[&#x27;username&#x27;]; echo &quot;&lt;br&gt;&quot;; echo &#x27;Your Password:&#x27; .$row[&#x27;password&#x27;]; echo &quot;&lt;/font&gt;&quot;; &#125; else &#123; echo &#x27;&lt;font color= &quot;#FFFF00&quot;&gt;&#x27;; print_r(mysql_error()); echo &quot;&lt;/font&gt;&quot;; &#125;&#125; else &#123; echo &quot;Please input the ID as parameter with numeric value&quot;;&#125; 通过分析以上部分源码，我们可以发现，当你输入一个id时，这个文件得到了一个id，if函数执行true下的代码段，将本次查询记录到result的txt文件中，并从数据库中查询，显示信息。因此当我们输入?id=1时网页能够返回账号密码。而当我们输入?id=1’时，我们可以发现，第11行代码得到id为1’后，即把$id替换为1’后，代码中出现了三个单引号，这就将导致单引号无法正确对应，引起报错。 既然多输入了一个单引号，我们就要想办法把多余出来的那个单引号排除掉，在SQL注入中，最常用的方法便是注释，我们在域名最后添加上注释符：http://127.0.0.1/Less-1/?id=1%27--+或者我们可以将–+替换为#（%23） 这样我们发现，回车后的页面重新显示正常，这时我们可以进行测试判断此处是否有注入点。我们可以使用and 1=1和and 1=2进行判断，其中1=1表示恒为真，1=2表示恒为假。通过下两图我们可以发现两者显示页面不同，说明在此处存在注入点： 既然存在注入点，我们就要想办法在此处获取我们需要的数据。由于第11行这句代码本身就是select语句，因此我们在进行查询时需要运用到union语句来合并两个select语句的结果。不过要注意，使用union语句的先决条件是语句内部的SELECT语句必须拥有相同数量的列，因此我们需要先获取表格中的字段数。使用order by语句进行字段数查询，当我们测试到order by 4时，发现文档页面出现了以下的提示： Unknown column ‘4’ in ‘order clause’ 无法识别第4列，这就说明表格中只有3列，我们就可以运用union语句来进行注入。首先我们将id改为-1，接着注入以下代码来获取显示页面对应的字段：union select 1,2,3 可以发现账户与密码两列对应的字段数为2和3，那么在下述的操作中，我们就可以将union语句中的2或3替换成新的select语句来获取我们想要的信息，例如我们可以将上述域名中的2替换为下列代码来查询全部数据库的名称：(select group_concat(schema_name) from information_schema.schemata) 或者使用将2替换为database()查询当前数据库的名称 这样我们就得到了我们要查找的数据库的名称，我们知道，数据存在于数据表里，而数据表又存在于数据库里，所以接下来我们需要获得数据库内所有表的名称。我们可以将原来2的位置继续替换成下列代码进行查询：select group_concat(table_name) from information_schema.tables where table_schema=&#39;数据库名&#39; 取得了表名之后我们就可以想办法获得其中的数据了，数据储存在数据表的列当中，我们需要继续获得列名，这里我们获取users表中的列名，同样替换原来2的位置：select group_concat(column_name) from information_schema.columns where table_schema=&#39;数据库名&#39; and table_name=&#39;表名&#39; 做到这里，我们就可以愉快的获取到我们想要的信息了select group_concat(列名) from 数据库名.数据表名 总结SQL注入第一关的解题流程大致就是这样，实际上，在解题时的关键点就在于找到SQL注入点，只有找到注入点我们才能进行SQL注入，从而获得我们想要的数据。后续的每一关都会有一个提示，我们要根据提示找到那个注入点，找到注入点之后我们就可以一步一步地将数据从数据库中取出。","categories":[{"name":"web","slug":"web","permalink":"http://example.com/categories/web/"}],"tags":[{"name":"-web前端 -mysql","slug":"web前端-mysql","permalink":"http://example.com/tags/web%E5%89%8D%E7%AB%AF-mysql/"}]},{"title":"HTML基础学习","slug":"HTML基础学习","date":"2021-09-22T09:24:52.000Z","updated":"2021-09-22T12:49:43.231Z","comments":true,"path":"2021/09/22/HTML基础学习/","link":"","permalink":"http://example.com/2021/09/22/HTML%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/","excerpt":"前言由于php语言常常被嵌套在HTML中用于实现动态页面，所以在进行网页源代码阅读时我们往往能看到HTML语言。在学习php之前，先学习HTML基础，可以更好的帮助我们了解网页的布局，也能使我们阅读代码时更好的理解代码含义。 一、HTML语言语法1.HTML中的语法基本","text":"前言由于php语言常常被嵌套在HTML中用于实现动态页面，所以在进行网页源代码阅读时我们往往能看到HTML语言。在学习php之前，先学习HTML基础，可以更好的帮助我们了解网页的布局，也能使我们阅读代码时更好的理解代码含义。 一、HTML语言语法1.HTML中的语法基本 HTML文件中是以标签对或标签来标记网页结构和显示资料内容的。标签对开始表现为&lt;xxx&gt;,标签结束表现为&lt;/xxx&gt;，其中还有一些标签不需要结束标签，例如&lt;br&gt;和&lt;p&gt;等，这些标签被称为空标签。 而HTML标签也是具有属性的，属性是为HTML元素所提供的说明信息。HTML的属性无先后次序之分，并且属性设置是可选的，如果不进行属性设置的话属性将会以默认值的形式被调用。下例是img图像标签格式：&lt;img src=&quot;http://www.baidu.com/img/baidu.gif&quot; height=&quot;200&quot; width=&quot;100&quot; /&gt;在上述语句中，src为路径，height为高度，width为宽度 在HTML的语法中，HTML标签名和属性都不区分大小写字母，因此，&lt;br&gt;和&lt;BR&gt;还有&lt;Br&gt;三者无任何区别。 HTML源代码中的回车与空格都不会在HTML页面中体现，因此我们需要应用格式标签进行文字排版。 2.HTML注释和所有的编程语言一样，注释不影响代码的运行，善于使用注释也是作为一个程序员应该养成的良好习惯。在HTML语言中，注释的方式比起我们常见的c语言较为特别，注释以&lt;!--开始，以--&gt;结束,举例如下： 12345678&lt;html&gt; &lt;head&gt; &lt;!--注释信息1--&gt; &lt;/head&gt; &lt;body&gt; &lt;!--注释信息2--&gt; &lt;/body&gt;&lt;/html&gt; 3.HTML字符实体有些字符串在HTML语言中具有特殊含义，比如标签中用到的”&lt;””&gt;”等等，这些字符串在HTML中就不可直接输出。而为了输出这些字符串，我们就需要应用字符实体来表示这些字符串.字符实体由”&amp;”、实体名称和”;”构成，以下列出一些常见的实体名称，在使用时要记得在其左右两边加上”&amp;”和”;”： 实体名称 输出字符串 nbsp 空格 amp &amp; lt &lt; gt &gt; quot “ 二、HTML文件结构正如编写C语言时一定需要一个主函数一样，编写HTML时也需要几个全局架构标签，这些标签将HTML代码分为了三个部分进行编写，格式如下： 123456&lt;html&gt; &lt;head&gt; &lt;/head&gt; &lt;body&gt; &lt;/body&gt;&lt;/html&gt; 三个标签对分别为最外层标签，头部标记和文档主体标记，不同的部分起到了不同的作用，接下来我们分别介绍这三个部分。 1.最外层标签&lt;html&gt;和&lt;/html&gt;就是最外层标签，主要作用是告诉浏览器这个HTML文件的开始点与结束点。而由于HTML的不严谨性，只需要存在开始标记HTML文件就可以被浏览器解析。 2.头部标记&lt;head&gt;和&lt;/head&gt;标签为头部标记，在它们之间的文本是头信息。头信息中主要包括页面的一些描述语句，以及引入CSS和JavaScript脚本。在头信息中的标签使用量小于文档主体标记中的标签使用量，主要用来说明文件标题和整体文件的公共属性。 3.文档主体标记&lt;body&gt;和&lt;/body&gt;标签为主体标记，在他们之间的文本用来放置页面中的显示内容。网页呈现出的文字、图片、超链接等等都要在这个标记中进行声明。我们学习的php语言也会嵌套在这个部分。而&lt;body&gt;标签也有自己的属性值，可以设置其标签属性控制整个页面的风格，例如：&lt;body bgcolor=&quot;#FFFFFF&quot; text=&quot;red&quot;&gt;以上代码设置了本页面的背景颜色为黑色，字体颜色为红色 在HTML语言中，颜色即可以用英文单词表示，也可以使用RGB来表示 三、页面编辑网页有多种多样的呈现方式，网页中也含有大量元素，本版块将对最基本的文字、图片以及链接的代码进行分析。同时，由于在HTML代码的编写中，经常运用到CSS样式，想要了解CSS样式可以参考以下链接中的CSS基础教程进行学习：CSS教程 1.文字 格式标签在上文中我们提到了格式标签，格式标签一般用于定义网页的布局，下图列举了常用的格式标签： 文本标签文本标签用于强调或特殊说明一些文字，下图列举了常用的文本标签： 2.图像我们常用到的图片格式一般为jpg、png和gif，这些格式的图片通过&lt;img&gt;标签插入到HTML文档中，格式如下：&lt;img src=&quot;&quot; alt=&quot;&quot; width=&quot;&quot; height=&quot;&quot; bordre=&quot;&quot; src：需要指定一个包括URL路径名在内的图片文件 alt：定义一个字符串，当鼠标悬停图片上时输出该字符串 width：设置图像宽度，单位像素 height：设置图像高度，单位像素 border：设置相框的宽度，单位像素 3.链接网页中往往有链接之间的跳转，链接文档中的指定位置被称为锚点。在HTML语言中，&lt;a&gt;标签被用于定义锚点与超链接，语法格式如下：&lt;a href=&quot;&quot; name=&quot;&quot; target=&quot;&quot;&gt;链接文字&lt;/a&gt; href：指定所链接位置的URL路径，绝对路径与相对路径均可 name：指定页面的锚点名称 target：指定打开链接所用的浏览器窗口名称，默认为在当前窗口打开 4.其他在页面呈现中还有其他的形式，例如表格、表单等。本篇博客没有对其进行具体介绍，但我们也要对其具有阅读能力，尤其是在靶场中也经常使用的表格，我们可以参考下列链接进行HTML表格学习：HTML表格教程 总结HTML主要被用来在web上发布信息以及完成简单布局，同时为了页面美观也会运用CSS。在学习php之前对web页面布局有过了解后，可以帮助我们更好地理解代码作用，使自己阅读代码没有障碍。本文总结了常见的HTML语言语法，希望能够在之后的靶场练习中起到参考作用。 资料引用：《PHP学习手册》 ——电子工业出版社","categories":[{"name":"web","slug":"web","permalink":"http://example.com/categories/web/"}],"tags":[{"name":"-web前端 -html","slug":"web前端-html","permalink":"http://example.com/tags/web%E5%89%8D%E7%AB%AF-html/"}]},{"title":"关于新手写博客时的常用md语法","slug":"关于新手写博客时的常用md语法","date":"2021-09-20T14:23:26.000Z","updated":"2021-09-22T13:29:37.868Z","comments":true,"path":"2021/09/20/关于新手写博客时的常用md语法/","link":"","permalink":"http://example.com/2021/09/20/%E5%85%B3%E4%BA%8E%E6%96%B0%E6%89%8B%E5%86%99%E5%8D%9A%E5%AE%A2%E6%97%B6%E7%9A%84%E5%B8%B8%E7%94%A8md%E8%AF%AD%E6%B3%95/","excerpt":"前言：当我们搭建完github+hexo的博客进入实验室后，我们所要面对的第一个问题便是如何用markdown语法写下自己的第一篇博客。我在阅读学习markdown语法与一些网上教程说明后，总结了一些常用markdown语法供参考。 一、关于标题","text":"前言：当我们搭建完github+hexo的博客进入实验室后，我们所要面对的第一个问题便是如何用markdown语法写下自己的第一篇博客。我在阅读学习markdown语法与一些网上教程说明后，总结了一些常用markdown语法供参考。 一、关于标题 当我们需要在markdown编辑器中加入如上（一、关于标题）的大标题时，只需要在标题文字前加上“#”字键并空格。文字前最多可以加上6个“#”键，每加入一个“#”键，标题字号就会小一号，代码如下：# Title 6种标题效果展示： TitleTitleTitleTitleTitleTitle二、关于引用当我们需要对资料进行引用时，我们可以在引用资料前加入“&lt;“键表示对文字进行引用，当然引用中同样可以继续引用，事实上，引用中的文字同样支持md语法。下方代码举例：&gt;word&gt;&gt;word 三、关于文字在markdown语法中同样有字体加粗，倾斜等效果，下方直接展示几种常用的字体效果：###1.斜体*word*word ###2.加粗**word**word ###3.斜体加粗***word***word 注意： 由于会和链接的默认样式产生混淆，markdown语法中无法直接为文字添加下划线，必须使用行内html解决该问题。 需要换行时需要在文字之间空一行。 如果需要分割线则在一个空行中输入三个或以上的“—”或“***”，效果如下： 四、插入代码如果你想在你的博客中编辑一段如上文的代码行，利用好“`”字符，举例如下：如果仅输入一行代码，在代码左右两边写上一个反引号： 如果想要输入代码块的话，在代码块的上一行与下一行写上三个反引号： 五、插入列表如果想在自己的文字前加入一个加粗黑点，即无序列表（如下） 例则只需要在你的文字之前加入“*”键，“+”键或“-”键并空格，例如：* 123+ 123- 123如果需要一个有序列表，则在文字前依次输入“1. ”“2. ”等，例如：1. a2. b3. c a b c 六、插入图片在写博客时，利用图片进行说明的环节是必不可少的。在markdown语法中，插入图片的格式为：![alt](图片地址 &quot;title&quot;)其中alt是在图片下方加入的文字注释，图片地址指的是图片在网络上的地址，因此推荐使用图床上传照片。而title是图片的标题，这部分可省略。例如上文“插入代码”中的图片语法如下：![例1](http://a1.qpic.cn/psc?/V11wVkh94am2Ju/05RlWl8gsTOH*Z17MtCBzHtFtpA*CeMm5FipmaRi.dnX*JxpHe14OqWyfguXnCP3JwMhlxlKCVqeswVw7*6gPA!!/c&amp;ek=1&amp;kp=1&amp;pt=0&amp;bo=XQAiAF0AIgARADc!&amp;tl=1&amp;tm=1632150000&amp;sce=0-12-12&amp;rf=0-18.jpg) 七、插入外链外链即超链接，语法形式与插入图片较为相似：[name](链接地址 &quot;title&quot;)其中的name指超链接的显示名称，链接地址即为网址域名，而同样title指的超链接标题，可写可不写，例如：[百度](www.baidu.com)百度 八、插入表格最后要介绍的是表格，表格在一些情况下也是不可或缺的。在markdown语法中，使用“|”来分隔不同的单元格，使用“-”来分隔表头和其他行，格式如下： 123|表头|表头|表头||---|---|---||文字|文字|文字| 表头 表头 表头 文字 文字 文字 小结以上便是我整理的关于使用md语法编写时的常用语法内容，同时这也是我第一次使用md语法进行文本编辑，希望今后我们能熟练掌握更深层次的md语法，让自己的写博客能力更上一层楼。","categories":[{"name":"other","slug":"other","permalink":"http://example.com/categories/other/"}],"tags":[{"name":"-markdown -hexo","slug":"markdown-hexo","permalink":"http://example.com/tags/markdown-hexo/"}]}],"categories":[{"name":"web","slug":"web","permalink":"http://example.com/categories/web/"},{"name":"other","slug":"other","permalink":"http://example.com/categories/other/"}],"tags":[{"name":"-web前端 -write up -ctf","slug":"web前端-write-up-ctf","permalink":"http://example.com/tags/web%E5%89%8D%E7%AB%AF-write-up-ctf/"},{"name":"-web前端 -mysql","slug":"web前端-mysql","permalink":"http://example.com/tags/web%E5%89%8D%E7%AB%AF-mysql/"},{"name":"-web前端 -html","slug":"web前端-html","permalink":"http://example.com/tags/web%E5%89%8D%E7%AB%AF-html/"},{"name":"-markdown -hexo","slug":"markdown-hexo","permalink":"http://example.com/tags/markdown-hexo/"}]}